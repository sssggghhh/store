<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace属性：用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，需要标注报的完整路径接口-->
<mapper namespace="com.cy.store.mapper.UserMapper">
    <!--自定义映射规则：resultMap标签来完成映射规则的定义
     id属性：标签给这个映射负责分配一个唯一的id值，对应的就是resultMap=“id属性的值”属性的取值
     type属性：取值是一个类，表示的是数据库中的查询结果与Java中哪个实体类进行结果集的映射
    -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
        <!--将表的资源和类的属性不一致的字段进行匹配指定，名称一致的字段可以省略不写,id不能省-->
        <id column="uid" property="uid"></id>
        <result column="is_delete" property="isDelete"></result>
        <result column="created_user" property="createdUser"></result>
        <result column="created_time" property="createdTime"></result>
        <result column="modified_user" property="modifiedUser"></result>
        <result column="modified_time" property="modifiedTime"></result>
    </resultMap>

    <!--id属性：表示映射的接口中方法的名称，直接在标签的内容部来编写SQL语句
    useGeneratedKeys属性：表示开启某个字段的值递增（主键）
    keyProperty属性：标签将表中的哪个字段作为主键进行递增-->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user (username, password, salt, phone, email, gender, avatar, is_delete,
                            created_user, created_time, modified_user, modified_time)
                             values (#{username},#{password},#{salt},#{phone},#{email},#{gender},#{avatar},#{isDelete},
            #{createdUser},#{createdTime},#{modifiedUser},#{modifiedTime}
            )
    </insert>

    <!--select语句在执行的时候，查询结果是一个对象，多个对象
    resultType：表示查询的结果集类型，只需要指定对应映射类的类型，并且包含完整包
    resultMap：当表的资源和类的对象属性的字段名称不一致时，来自定义查询字段-->
    <select id="findByUsername" resultMap="UserEntityMap">
        select * from t_user where username = #{username}
    </select>

    <!--根据用户uid来修改用户密码-->
    <update id="updatePasswordByUid">
        update t_user set
                          password = #{password},
                          modified_user = #{modifiedUser},
                          modified_time = #{modifiedTime}
                    where uid = #{uid}
    </update>

    <!--根据uid查询用户信息-->
    <select id="findUserByUid"  resultMap="UserEntityMap">
        select * from t_user where uid = #{uid}
    </select>

    <!--根据用户uid来修改用户的个人资料-->
    <update id="updateUserInfoByUid">
        update t_user set
        <if test="phone != null">phone = #{phone},</if>
        <if test="email  != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
                          modified_user = #{modifiedUser},
                          modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>

    <!--修改用户头像信息-->
    <update id="updateUserAvatarByUid">
        update t_user set
            avatar = #{avatar},
            modified_user = #{modifiedUser},
            modified_time = #{modifiedTime}
        where uid = #{uid}
    </update>
</mapper>